-----------------------------------------------------------
    jQuery
-----------------------------------------------------------
---Introduction
jQuery:
- a JavaScript library that provides a convenient and consistent API across most browsers and platforms
- can use JavaScript and the DOM API to accomplish much of what jQuery provides, but differences between DOM implementations have historically made it difficult to share code between browsers
- many projects still use jQuery, and that will probably be the case for a long time to come

---Read: Introduction to jQuery
jQuery:
- takes a lot of the browser support code and wraps it in universal methods that work with all browsers
- by far the most popular JavaScript library available
- at its core, it's a function that wraps a collection of DOM elements and some convenience methods into an object

DOM ready callback:
[js]
$(document).ready(function() {
  // DOM loaded and ready, referenced image on img tags are not ready
});
[/js]

`ready` doesn't wait for the browser to load images included via `<img>` tags. In some cases, you must delay execution until the window finishes loading:
[js]
$(window).load(function() {
  // DOM loaded and ready, referenced image on img tags loaded and ready
});
[\js]

Even shorter way to write a DOM ready callback:
[js]
$(function() {
  // DOM is now loaded
});
[\js]

The jQuery function, `$()`:
- if the argument passed to the function is a string or DOM element, it wraps a collection of jQuery objects and returns them
- if the argument is a function, jQuery uses that function as a callback when the document is ready
- `$` is the alias of `jQuery`

Airbnb recommends prefixing names that reference jQuery objects with a `$` to instantly distinguish from other objects.

Check the `jQuery` property of a variable to determine if that variable references a jQuery object.

Whenever you have a CSS property that includes one or more hyphens, you can omit the hyphens and capitalize the next letter instead (camelCase).

---Read: jQuery Events
The `on` method, like most jQuery methods, has more than one calling format:
- the most common is where the first argument is the event type and the second is the callback function

In order to access jQuery's convenience methods, we need to pass non-jQuery objects to the jQuery function

jQuery has many convenience methods. Here's an example:
[js] $('a').on('click', function(event) {}); [/js]
vs.
[js] $('a').click(function(e) {}); [/js]

The `.on()` method attaches event handlers to the currently selected set of elements in the jQuery object.

From jQuery docs:
The `.find()` and `.children()` methods are similar, but the latter only travels a single level down the DOM tree.

---Read: jQuery DOM Traversal
To look outward from an object:
1. `.parent()`: used with and without a selector
2. `.closest()`: allows you to look further out than the immediate parent

`parent` never looks at the current element for consideration, while `closest` sees if the current element is a match.

The `closest` method is very useful for finding the first ancestor element that meets the criteria passed in to the method.

The `nextAll` (`prevAll`) method will return all siblings after (before) the current element, with an optional selector passed in.

Use `siblings` with an optional selector to get all the current element's siblings.
